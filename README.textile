h1. Spring Web Services component

This component allows you to integrate with "Spring Web Services":http://static.springsource.org/spring-ws/sites/1.5/. It offers both _client_-side support, for accessing web services, and _server_-side support for creating your own contract-first web services.
 
Maven users will need to add the following dependency to their pom.xml for this component:
<code>
	<dependency>
	    <groupId>org.apache.camel</groupId>
	    <artifactId>camel-spring-ws</artifactId>
	    <version>x.x.x</version>
	    <!-- use the same version as your Camel core version -->
	</dependency>
</code>

h3. Dependencies

This component offers support for Spring-WS 1.5.9 (the latest GA release) which is compatible with Spring 2.5.x. In order to run Spring-WS 1.5.9 on Spring 3.0 you need to exclude the OXM module from Spring 3.0 as this module is also included in Spring-WS 1.5.9 (see "this post":http://stackoverflow.com/questions/3313314/can-spring-ws-1-5-be-used-with-spring-3).

h2. URI format

<code>
springws:[mapping-type:]address[?options]
</code>

To expose a web service *mapping-type* needs to be set to any of the following:

| Mapping type | Description |
| @rootqname@ | Offers the option to map web service requests based on the qualified name of the root element contained in the message. | 
| @soapaction@ | Used to map web service requests based on the SOAP action specified in the header of the message. |
| @uri@ | In order to map web service requests that target a specific URI.  |  
| @xpathresult@ | Used to map web service requests based on the evaluation of an XPath @expression@ against the incoming message. The result of the evaluation should match the XPath result specified in the endpoint URI. | 
| @beanname@ | Allows you to reference a @org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher@ in order to integrate with existing (map-based) "endpoint mappings":http://static.springsource.org/spring-ws/sites/1.5/reference/html/server.html#server-endpoint-mapping like @PayloadRootQNameEndpointMapping@, @SoapActionEndpointMapping@, etc | 

As a consumer the *address* should contain a value relevant to the specified mapping-type (e.g. SOAP action, XPath expression). As a provider the address can be set to the URI of the web service your calling upon.

You can append query options to the URI in the following format, @?option=value&option=value&...@

h2. Options

| Name | Required? | Description |
| @soapAction@ | No | SOAP action to include inside a SOAP request when accessing remote web services | 
| @wsAddressingAction@ | No | WS-Addressing 1.0 action header to include when accessing web services. The @To@ header is set to the _address_ of the web service as specified in the endpoint URI (default Spring-WS behavior). |
| @expression@ | Only when _mapping-type_ is @xpathresult@ | XPath expression to use in the process of mapping web service requests, should match the result specified by @xpathresult@ |

h3. Registry based options

The following options can be specified in the registry (most likely a Spring ApplicationContext) and referenced from the endpoint URI using the # notation.

| Name | Required? | Description |
| @webServiceTemplate@ | No | Option to provide a custom "WebServiceTemplate":http://static.springsource.org/spring-ws/sites/1.5/apidocs/org/springframework/ws/client/core/WebServiceTemplate.html. This allows for full control over  client-side web services handling; like adding a custom interceptor or specifying a fault resolver, message sender or message factory. | 
| @messageSender@ | No | Option to provide a custom "WebServiceMessageSender":http://static.springsource.org/spring-ws/sites/1.5/apidocs/org/springframework/ws/transport/WebServiceMessageSender.html, useful when there's no need to override the default WebServiceTemplate | 
| @messageFactory@ | No | Option to provide a custom "WebServiceMessageFactory":http://static.springsource.org/spring-ws/sites/1.5/apidocs/org/springframework/ws/WebServiceMessageFactory.html, useful when there's no need to override the default WebServiceTemplate | 
| @endpointMapping@ | Only when _mapping-type_ is @rootqname@, @soapaction@, @uri@ or @xpathresult@ | Reference to @org.apache.camel.component.spring.ws.bean.CamelEndpointMapping@ in the Registry/ApplicationContext. Only one bean is required in the registry to serve all Camel/Spring-WS endpoints. This bean is auto-discovered by the "MessageDispatcher":http://static.springsource.org/spring-ws/sites/1.5/apidocs/org/springframework/ws/server/MessageDispatcher.html and used to map requests to Camel endpoints based on characteristics specified on the endpoint (like root QName, SOAP action, etc) |
| @endpointDispatcher@ | Only when _mapping-type_ is @beanname@ | Reference to @org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher@ in the Registry/ApplicationContext. For every endpoint with mapping-type @beanname@ one bean with a corresponding name is required in the registry. This bean acts as a bridge between the Camel endpoint and an existing "EndpointMapping":http://static.springsource.org/spring-ws/sites/1.5/reference/html/server.html#server-endpoint-mapping. |
| @transformerFactory@ | No | Option to override default TransformerFactory. The provided transformer factory must be of type @javax.xml.transform.TransformerFactory@ |

h2. Message headers

| Name | Type | Description |
| @CamelSpringWebserviceEndpointUri@ | String | URI of the web service when accessing remote services in client mode, overrides _address_ part of the endpoint URI | 
| @CamelSpringWebserviceSoapAction@ | String | Header to specify the SOAP action of the message, overrides @soapAction@ option if present | 
| @CamelSpringWebserviceAddressingAction@ | URI | Use this header to specify the WS-Addressing action of the message, overrides @wsAddressingAction@ option if present |

h2. Client mode, accessing web services

<code>
from("direct:example")
.to("springws:http://foo.com/bar")
</code>

<code>
template.requestBody("direct:example", "<foobar xmlns=\"http://www.foo.com\"><msg>test message</msg></foobar>");
</code>

h3. Sending SOAP and WS-Addressing action headers

<code>
from("direct:example")
.to("springws:http://foo.com/bar?soapAction=http://foo.com&wsAddressingAction=http://bar.com")
</code>

<code>
template.requestHeaderAndBody("direct:example", "<foobar xmlns=\"http://www.foo.com\"><msg>test message</msg></foobar>");
</code>

h3. Using a custom MessageSender and MessageFactory

Reference a custom MessageSender and MessageFactory in the registry from your endpoint URI.
<code>
from("direct:example")
.to("springws:http://foo.com/bar?messageFactory=#sunSaajMessageFactory&messageSender=#commonsHttpMessageSender")
</code>

Spring configuration:
<code>
	 <bean id="commonsHttpMessageSender" class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
		<property name="credentials">
			<bean class="org.apache.commons.httpclient.UsernamePasswordCredentials">
				<constructor-arg index="0" value="admin"/>
				<constructor-arg index="1" value="secret"/>
			</bean>
		</property>
	</bean>
	
	<!-- force use of Sun SAAJ implementation, http://static.springsource.org/spring-ws/sites/1.5/faq.html#saaj-jboss -->
	<bean id="sunSaajMessageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory">
		<property name="messageFactory">
		<bean class="com.sun.xml.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl"></bean>
		</property>
	</bean>
</code>

h3. POJO (un)marshalling

<pre>
JaxbDataFormat jaxb = new JaxbDataFormat(false);
jaxb.setContextPath("com.example.model);

from("direct:example")
.marshal(jaxb)
.to("springws:http://example.com/mywebservice?soapAction=http://example.com/mywebservice")
.convertBodyTo(String.class);
</pre>

h2. Exposing web services



